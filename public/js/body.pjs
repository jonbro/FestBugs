class Body{
  BodySegment[] seg;
  b2Body head;
  b2MouseJoint mouseJoint;
  float p1, p2;
  float goalPhase, goalPhase2;
  color c;
  float headMass;
  b2Body[] eyes;
  b2RevoluteJoint[] armJoints;
  b2Body[] hands;
  int note;
  var noteTime;
  var noteCounter;
  string spr;
  Body(numSegments, x, y, w, h){
    seg = new BodySegment[numSegments];
    for (var i = 0; i < seg.length; i++) {
        seg[i] = new BodySegment((x+10)/ratio, (y+i*(h*1.3))/ratio, (numSegments-i)/numSegments*w/ratio, h/ratio, (numSegments-i)/numSegments*14+7);
      // connect the body segments
      if(i>0){
        createJoint(seg[i].ne, seg[i-1].se, 1, 20)
        createJoint(seg[i].nw, seg[i-1].sw, 1, 20);
        // // and crossbars
        createJoint(seg[i].ne, seg[i-1].sw, 0.9, 10);
        createJoint(seg[i].nw, seg[i-1].se, 0.9, 10);
      }
    };
    // create a head
    head = createNode((x+10)/ratio, (y-1*30)/ratio, random(10, 30));
    // attach the head
    createRevJoint(seg[0].ne, head);
    createRevJoint(seg[0].nw, head);

    // create a bunch of eyes
    eyeCount = Math.floor(random(2, 7));
    eyes = new b2Body[eyeCount];
    // the eyes loop through 180 degrees adding an eye at equal intervals around the head
    for (var i = 0; i < eyeCount; i++) {
      var angle = (180 * i/eyeCount)-180+(1/eyeCount*180/2);
      pos = new b2Vec2(cos(radians(angle)), sin(radians(angle)));
      pos.Normalize();
      // expand the eyes out a bit from the head
      pos.Multiply(30/ratio);
      pos.Add(head.GetWorldCenter());
      // create the eye
      eyes[i] = createNode(pos.x, pos.y, 5);
      // attach the eye to the head
      createRevJoint(head, eyes[i], 0.9)
    };
    // add some simple arms
    armJoints = new b2RevoluteJoint[2];
    hands = new b2Body[2];
    // left arm
    // add the shoulder node
    lArmCenter = new b2Vec2(seg[1].nw.GetWorldCenter().x, seg[1].nw.GetWorldCenter().y);
    lArmCenter.x -= 10/ratio;
    lArm = createNode(lArmCenter.x, lArmCenter.y, 15);
    createRevJoint(seg[1].nw, lArm);
    createRevJoint(seg[0].sw, lArm);
    // add the arm node
    lArmCenter.x -= 30/ratio;
    hands[0] = createNode(lArmCenter.x, lArmCenter.y, 5);
    armJoints[0] = createRevJoint(lArm, hands[0]);

    // right arm
    // add the shoulder node
    rArmCenter = new b2Vec2(seg[1].ne.GetWorldCenter().x, seg[1].ne.GetWorldCenter().y);
    rArmCenter.x += 10/ratio;
    rArm = createNode(rArmCenter.x, rArmCenter.y, 15);
    createRevJoint(seg[1].ne, rArm);
    createRevJoint(seg[0].se, rArm);
    // add the arm node
    rArmCenter.x += 30/ratio;
    hands[1] = createNode(rArmCenter.x, rArmCenter.y, 5);
    armJoints[1] = createRevJoint(rArm, hands[1]);




    p1 = 100 + (random()*2-1) * 50;
    p2 = random(20000, 25000);
    goalPhase = random(20000);
    goalPhase2 = random(20000);
    colorMode(HSB, 100);
    c = color(Math.random()*100, 100, 50);

    // for the synthesizer
    note = Math.floor(random(50, 80));
    noteTime = random(10)*500;
    noteCounter = noteTime;
    parts = ["body_1.png", "body_2.png", "body_3.png"];
    spr = parts[floor(random()*parts.length)];

  }

  void draw(){
    // for (var i = seg.length - 1; i >= 0; i--) {
    //   seg[i].draw();
    // };

    // draw as a tape
    noStroke();
    for (var i = seg.length - 1; i >= 0; i--) {
      beginShape();
      texture(spriteSheet);
      b = color((seg.length-i)/seg.length*255*(noteCounter/noteTime), (seg.length-i)/seg.length*255*(noteCounter/noteTime), (seg.length-i)/seg.length*255*(noteCounter/noteTime));
      fill(blendColor(c, b, SOFT_LIGHT));
      vertex(seg[i].ne.GetWorldCenter().x*ratio, seg[i].ne.GetWorldCenter().y*ratio, getUV(spr, "e"), getUV(spr, "n"));
      vertex(seg[i].se.GetWorldCenter().x*ratio, seg[i].se.GetWorldCenter().y*ratio, getUV(spr, "e"), getUV(spr, "s"));
      vertex(seg[i].sw.GetWorldCenter().x*ratio, seg[i].sw.GetWorldCenter().y*ratio, getUV(spr, "w"), getUV(spr, "s"));
      vertex(seg[i].nw.GetWorldCenter().x*ratio, seg[i].nw.GetWorldCenter().y*ratio, getUV(spr, "w"), getUV(spr, "n"));
      endShape();
    };
    // draw the eyes
      for (var i = 0; i < eyes.length; i++) {
        eyeCenter = eyes[i].GetWorldCenter()
        fill(c);
        ellipse(eyeCenter.x*ratio, eyeCenter.y*ratio, 25, 25);
        fill(255);
        ellipse(eyeCenter.x*ratio, eyeCenter.y*ratio, 10, 10);
      };      
    // calculate a vector to the center of the screen from the head
    target = new b2Vec2((noise(millis()/p2+goalPhase)*width)/ratio, (noise(millis()/p2+goalPhase2)*height)/ratio); // TODO: I should stop hard coding this at some point
    fill(c);
    ellipse(target.x*ratio, target.y*ratio, 10, 10)
    headCenter = head.GetWorldCenter();
    target.Subtract(headCenter);
    target.Normalize();
    target.Multiply(((sin(millis()/p1))+1)*10);
    // apply a force to the head
    // head.ApplyForce(target, head.GetWorldCenter())
    // head.SetPosition(target, head.GetWorldCenter());

    // jam out on the arm
    armJoints[0].SetMotorSpeed(cos(millis()/1000));
    armJoints[1].SetMotorSpeed(-1*cos(millis()/1000));
    // draw the hands
    for (var i = 0; i < hands.length; i++) {
      center = hands[i].GetWorldCenter();
      fill(blendColor(c, color(255), SOFT_LIGHT));
      ellipse(center.x*ratio, center.y*ratio, 20, 20);
    };

    // count for the next note
    noteCounter -= ellapsed;
    if(noteCounter < 0){
      noteCounter += noteTime;
      synth.queueNote(note);
      target = new b2Vec2((noise(millis()/p2+goalPhase)*width)/ratio, (noise(millis()/p2+goalPhase2)*height)/ratio); // TODO: I should stop hard coding this at some point
      headCenter = head.GetWorldCenter();
      target.Subtract(headCenter);
      target.Normalize();
      target.Multiply(200);
      // apply a force to the head
      head.ApplyForce(target, head.GetWorldCenter())

    }
  }
}

// apparently the preprocessor is a little bit wierd, but we should be able to do this type of thing
class BodySegment{
  float x, y, w, h;
  b2Body ne, se, sw, nw;
  b2DistanceJoint n, s, e, west;

  BodySegment(float _x, float _y, float _w, float _h, r){
    x = _x;
    y = _y;
    w = _w;
    h = _h;
    ne = createNode(x+w/2, y-h/2, r);
    nw = createNode(x-w/2, y-h/2, r);
    se = createNode(x+w/2, y+h/2, r);
    sw = createNode(x-w/2, y+h/2, r);
    // set up all the distance joints that will keep the segments apart
    //n
    sideDamp = 0.03;
    n     = createJoint(ne, nw, sideDamp, 4);
    e     = createJoint(ne, se, sideDamp, 4);
    s     = createJoint(sw, se, sideDamp, 4);
    west  = createJoint(sw, nw, sideDamp, 4);
    // create the cross joints
    createRevJoint(ne, sw);
    createRevJoint(nw, se);
  }
  void draw(){
    drawShape(ne.shape, ne);
    drawShape(nw.shape, nw);
    drawShape(se.shape, se);
    drawShape(sw.shape, sw);
  }
}