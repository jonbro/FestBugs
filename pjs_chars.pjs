ParticleSystem physics;

Particle p;
Spring s;
Body[] bodies;
var b2Vec2 = Box2D.Common.Math.b2Vec2
  , b2AABB = Box2D.Collision.b2AABB
  , b2BodyDef = Box2D.Dynamics.b2BodyDef
  , b2Body = Box2D.Dynamics.b2Body
  , b2Shape = Box2D.Collision.Shapes.b2Shape
  , b2FixtureDef = Box2D.Dynamics.b2FixtureDef
  , b2Fixture = Box2D.Dynamics.b2Fixture
  , b2World = Box2D.Dynamics.b2World
  , b2MassData = Box2D.Collision.Shapes.b2MassData
  , b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape
  , b2CircleShape = Box2D.Collision.Shapes.b2CircleShape
  , b2DebugDraw = Box2D.Dynamics.b2DebugDraw
  , b2MouseJointDef =  Box2D.Dynamics.Joints.b2MouseJointDef
  , b2DistanceJointDef =  Box2D.Dynamics.Joints.b2DistanceJointDef
  , b2RevoluteJointDef =  Box2D.Dynamics.Joints.b2RevoluteJointDef
  , b2Math = Box2D.Common.Math.b2Math
  ;

var world = new b2World(
     new b2Vec2(0, 0)    //gravity
  ,  true                 //allow sleep
);
var selectedBody, mouseJoint;
var ratio = 30; // for converting box2d units to display and vice versa
var doSleep = true;
var timeStep = 1.0/30;
var iteration = 12;
         var debugDraw = new b2DebugDraw();
      debugDraw.SetSprite(document.getElementById("debug").getContext("2d"));
      debugDraw.SetDrawScale(30.0);
      debugDraw.SetFillAlpha(0.5);
      debugDraw.SetLineThickness(1.0);
      debugDraw.SetFlags(b2DebugDraw.e_shapeBit | b2DebugDraw.e_jointBit);
      world.SetDebugDraw(debugDraw);

void setup()
{
  size( 800, 800 );
  smooth();
  fill( 0 );
  ellipseMode( CENTER );

  bodies = new Body[1];
  for (var i = 0; i < bodies.length; i++) {
    bodies[i] = new Body(Math.ceil(Math.random()*5)+2, Math.random()*500, Math.random()*400, Math.random()*40+20, Math.random()*40+20);
  };

}

void draw()
{
  colorMode(RGB, 255)
  background(0xEEEEEE);
  for (var i = 0; i < bodies.length; i++) {
    bodies[i].draw();
  };
  update();
  world.Step(1 / 60, 15, 15);
  world.DrawDebugData();
  world.ClearForces();
}
b2Body getBodyAtMouse() {
  mousePVec = new b2Vec2(mouseX/30, mouseY/30);
  var aabb = new b2AABB();
  aabb.lowerBound.Set(mouseX/30 - 0.001, mouseY/30 - 0.001);
  aabb.upperBound.Set(mouseX/30 + 0.001, mouseY/30 + 0.001);
  
  // Query the world for overlapping shapes.
  //console.log(mouseX/30, mouseY/30, aabb)
  selectedBody = null;
  world.QueryAABB(function(fixture) {
    console.log(fixture);
    if(fixture.GetBody().GetType() != b2Body.b2_staticBody) {
       if(fixture.GetShape().TestPoint(fixture.GetBody().GetTransform(), mousePVec)) {
          selectedBody = fixture.GetBody();
          return false;
       }
    }
    return true;
  }, aabb);
  return selectedBody;
}


void update() {


};


void drawShape(shape,body) {
  switch(shape.m_type){
    case b2Shape.e_circleShape:
      var center = b2Math.MulX(body.m_xf, shape.m_p);
      var radius = shape.m_radius;
      ellipse(center.x*ratio, center.y*ratio, radius*ratio*2, radius*ratio*2);
    case b2Shape.e_polygonShape:
      poly = shape;
      // console.log(shape.GetType())
      beginShape();
      for (var i = 0; i < poly.m_vertexCount; i++) {
        b2Vec2 v = b2Math.MulMV(body.GetTransform().R, poly.GetVertices()[i]);
        v = b2Math.AddVV(v, body.GetWorldCenter());
        vertex(v.x*ratio, v.y*ratio);
      }
      endShape();
      break;
  }
}
void createJoint(a, b, d){
  joint = new b2DistanceJointDef();
  joint.Initialize(a, b, a.GetWorldCenter(), b.GetWorldCenter());
  joint.dampingRatio = d;
  joint.frequencyHz = 2.0;
  return world.CreateJoint(joint);
}
void createRevJoint(a, b){
  joint = new b2RevoluteJointDef();
  joint.Initialize(a, b, a.GetWorldCenter());
  joint.enableLimit = true;
  joint.upperAngle = 0.25 * PI;
  joint.lowerAngle = -0.25 * PI;
  joint.maxMotorTorque = 5;
  joint.motorSpeed = 0;
  joint.enableMotor = true;
  return world.CreateJoint(joint);
}
void createNode(x, y, r){
  fixDef = new b2FixtureDef();
  fixDef.density = 1.0;
  fixDef.friction = 0.5;
  fixDef.restitution = 0.2;
  fixDef.filter.groupIndex = -8;
  // the shape definition
  fixDef.shape = new b2CircleShape(
    r/2/ratio //radius
  );
  // the body definition
  bodyDef = new b2BodyDef();
  bodyDef.type = b2Body.b2_dynamicBody;
  bodyDef.position.Set(x,y);
  // the body in the world, I don't know the diff between this and the main body def
  body = world.CreateBody(bodyDef);
  body.CreateFixture(fixDef);
  body.shape = fixDef.shape;
  return body;
}
